# Документация модуля оплаты

> ОБРАТИТЕ ВНИМАНИЕ!
>
> Ключи показанные в руководстве **НЕ ПРЕДОСТАВЛЯЮТ ДОСТУПА К ФУНКЦИОНАЛУ**, но позволят Вам проверить правильность
> работы подписи в вашем приложении.
>
> Для работы с API необходимо быть зарегистрированным в сервисе
>

## Общая информация

* Все поля, связанные со временем указыватся с нулевым смещением (UTC+0) в формате *YYYY-MM-DD'T'hh:mm:ss*)<br>**Пример:
  ** 2023-08-20T13:51:00 (Московское время: 2023-08-20T16:51:00)
* API-ключи **чувствительны к регистру**.

## HTTP-коды возврата

| Код возврата | Описание                                                                                                                                                                                         |
|--------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 200          | Операция выполнена успешно, возвращается объект JSON                                                                                                                                             |
| 4XX          | Используются для некорректно сформированных запросов; проблема на стороне отправителя                                                                                                            |
| 401          | Используется при ошибке авторизации                                                                                                                                                              |
| 403          | Используется при ошибке доступа                                                                                                                                                                  |
| 5XX          | Используются для внутренних ошибок, проблема на стороне платежной системы. **Важно НЕ рассматривать это как неудачную операцию; состояние выполнения НЕИЗВЕСТНО и могло быть выполнено успешно** |

## Авторизация

* **Обязательно:** Для каждого запроса ВНЕ ЗАВИСИМОСТИ ОТ ТИПА добавляется штамп времени (текущее время в формате UTC),
  передается в параметре запроса timestamp.

> GET /api/orders?timestamp=2023-08-20T13:51:00

Для авторизации необходимо поместить следующие параметры в заголовок запроса:

| Заголовок | Содержание                  |
|-----------|-----------------------------|
| UID       | **Персональный ключ (UID)** |
| SIGNATURE | **MD5-хеш (SIGNATURE)**     |

* **Заголовки необходимо формировать для каждого запроса к API**
* **MD5-хеш формируется в зависимости от типа запроса (GET/POST)**
* Для расчета **MD5-хеша (SIGNATURE)** потребуется **персональный ключ (UID)** и **приватный ключ (PRIVATE_KEY)**. Их
  можно получить в личном кабинете.
* **ВНИМАНИЕ! PRIVATE_KEY ИСПОЛЬЗУЕТСЯ ТОЛЬКО ДЛЯ ПОДПИСИ ЗАПРОСА И В ЯВНОМ ВИДЕ НЕ ПЕРЕДАЕТСЯ!**
  <br>

### GET-запрос

| Параметр    | Описание                                                             | Пример                                                    |
|-------------|----------------------------------------------------------------------|-----------------------------------------------------------|
| UID         | Персональный ключ                                                    | <code>e7742caf-5e74-498c-8f4f-d4ae0a6f2bf3</code>         |
| PRIVATE_KEY | Приватный ключ                                                       | <code>GJI/1MP8MvE/ODbnplDlnaQb8ZYQb8ZYIVSg+II6xnA=</code> |
| PARAMS      | Является конкантенация всех параметров в формате "param1=a&param2=b" | <code>timestamp=2023-08-20T13:51:00&page=2</code>         |

Подписью является MD5-HASH("{UID}:{PRIVATE_KEY}:{PARAMS}")

Пример тела подписи для GET-запроса:

    e7742caf-5e74-498c-8f4f-d4ae0a6f2bf3:GJI/1MP8MvE/ODbnplDlnaQb8ZYQb8ZYIVSg+II6xnA=:timestamp=2024-05-04T12:14:07&pageNumber=0&pageSize=4

Полученная подпись md5

    6c5711fa920e460e88dee24e0e5d61cd

### POST-запрос

| Параметр    | Описание          | Пример                                                                                                                                             |
|-------------|-------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|
| UID         | Персональный ключ | <code>e7742caf-5e74-498c-8f4f-d4ae0a6f2bf3</code>                                                                                                  |
| PRIVATE_KEY | Приватный ключ    | <code>GJI/1MP8MvE/ODbnplDlnaQb8ZYQb8ZYIVSg+II6xnA=</code>                                                                                          |
| PAYLOAD     | Тело запроса      | <code>{"OrderId": "11111111232132","Amount": 10000,"CallbackUrl": "https://site.com/pay/result","ReturnUrl":"https://site.com/pay/success"}</code> |

Подписью является MD5-HASH("{UID}:{PRIVATE_KEY}:{PAYLOAD}")

Пример тела подписи для POST-запроса:

```
    e7742caf-5e74-498c-8f4f-d4ae0a6f2bf3:GJI/1MP8MvE/ODbnplDlnaQb8ZYQb8ZYIVSg+II6xnA=:{
    "externalId": "111111112321341",
    "amount": 100,
    "currency": "USD",
    "callbackUrl": "https://site.com/pay/result",
    "clientInfo": "User777"
}
```

Полученая подпись md5

    d56e3c322c0cbb51897593085f0fcf99

Все методы можно предоставить в виде postman коллекции, которую необходимо импортировать,
настроить переменные

| Переменная  | Описание               | Пример                                                    |
|-------------|------------------------|-----------------------------------------------------------|
| UID         | Персональный ключ      | <code>e7742caf-5e74-498c-8f4f-d4ae0a6f2bf3</code>         |
| PRIVATE_KEY | Приватный ключ         | <code>GJI/1MP8MvE/ODbnplDlnaQb8ZYQb8ZYIVSg+II6xnA=</code> |
| api_server  | URL сервиса интеграции | <code>https://url-payment-sercive/api</code>               |

Для всей коллекции описан скрипт подписи каждого запроса. При необходимости можно сверяться с генерируемыми значениями

---

## Методы оплаты

### Получить доступные методы оплаты

`GET /payment_method_definitions`

Пример запроса:
`/api/payment_method_definitions?timestamp=2024-05-04T12:30:07`

Ответ (статус код 200):

```
{
    "success": true,
    "result": [
        {
            "id": "d53e3d2e-4f9e-4570-ad5c-0b7647e45e48",
            "name": "Банк США",
            "type": "BANK_CARD_TRANSFER",
            "currency": {
                "code": "USD",
                "name": "Доллар США",
                "isActive": true,
                "precision": 2
            }
        }
    ]
}
```

## Методы для работы с заявками приема средств

### Создать фиатную заявку приема средств

`POST /order`

* Опционально можно указать идентификатор заявки `paymentMethodDefinitionId` чтобы создать заявку с выбранным методом
  оплаты.

* Желательно указывать информацию о клиенте в поле "ClientInfo".

* В случае успеха, возвращается информация о заявке.

* В процессе обработки могут происходить ошибки. В это случае ответ будет с кодом 4XX и текстом ошибки

**Параметры:** Штамп времени в строке запроса

Тело запроса:

| Параметр                  | Тип     | Обязательный | Примечание                  |
|---------------------------|---------|--------------|-----------------------------|
| externalId                | string  | Да           | Внешний ключ заявки         |
| amount                    | decimal | Да           | Сумма заявки                |
| currency                  | string  | Да           | Код валюты заявки           |
| callbackUrl               | string  | Нет          | URL оповещения              |
| clientInfo                | string  | Нет          | Информация о клиенте        |
| paymentMethodDefinitionId | string  | Нет          | Идентификатор метода оплаты |

Пример запроса:
`/api/order?timestamp=2024-05-04T12:38:25`

#### Создание заявки

```<json>   
{
    "externalId": "111111112321341",
    "amount": 100,
    "currency": "USD",
    "callbackUrl": "https://site.com/pay/result",
    "clientInfo": "User777"
}
```

#### Создание заявки с выбором метода оплаты `paymentMethodDefinitionId`

```<json>
{
  "externalId": "11111111232132",
  "amount": 10.5,
  "currency": "RUB",
  "callbackUrl": "https://site.com/pay/result",
  "clientInfo": "User777",
  "paymentMethodDefinitionId": "55422a79-59f7-4bab-b3dc-1b2242c2dac7"
}
```

Ответ (статус код 200):

```<json>   
{
    "success": true,
    "result": {
        "hash": "a7efd403-7d89-4b3c-9111-b5e3c79528e6",
        "externalId": "111111112321341",
        "amount": 100.00,
        "details": {
            "phoneNumber": "1",
            "cardNumber": "2"
        },
        "callbackUrl": "https://site.com/pay/result",
        "clientInfo": "User777",
        "paymentMethod": {
            "id": "d53e3d2e-4f9e-4570-ad5c-0b7647e45e48",
            "name": "Банк США",
            "type": "BANK_CARD_TRANSFER",
            "currency": {
                "code": "USD",
                "name": "Доллар США",
                "isActive": true,
                "precision": 2
            }
        },
        "createdAt": "2024-05-04T15:34:55.56096812+03:00",
        "status": "PENDING"
    }
}
```

<span id="описание_заявки">Описание заявки</span>

В ответе возвращается информация по заявке.

* `hash` - идентификатор присвоенный заявке в нашей системе
* `externalId` - идентификатор переданный внешней системой
* `details` - информация о реквизитах. В зависимости от типа оплаты будет указан номер карты `cardNumber` и\или номер
  телефона `phoneNumber` по которым необходимо совершить платеж
* `paymentMethod` - информация о назначенном методе оплаты
* `status` - статус заявки

статус может быть

```
PENDING - исполняется
SUCCESS - успешно,
CANCELED - отклонена,
EXPIRED - истекла
```

Ответ (статус код 4XX):

```<json>   
{
    "success": false,
    "error": [
        {
            "errorType": "VALIDATION",
            "message": "Валюта не найдена в системе"
        },
        {
            "errorType": "VALIDATION",
            "message": "Метод оплаты не найден в системе"
        }
    ]
}
```

Ответ (статус код 4XX):

```<json>   
{
    "success": false,
    "error": [
        {
            "errorType": "FAILED_SELECT_PAYMENT_METHOD",
            "message": "Не удалось выделить реквизит"
        }
    ]
}
```

### Подтвердить фиатную заявку

`POST /order/{hash}/confirm`

* Используется в случае, когда пользователь оплатил заявку по реквизитам и подтверждает это

* Для функционирования системы необязательный параметр. Служит только для информирования

* Тело запроса пустое

* Параметр `hash` указывается в строке запроса

Пример запроса:
`/api/order/a7efd403-7d89-4b3c-9111-b5e3c79528e6/confirm?timestamp=2024-05-04T13:24:42`

Ответ (статус код 200):

```<json>   
{
    "success": true,
    "result": "OK"
}
```

Ответ (статус код 4XX):

```<json>   
{
    "success": false,
    "error": [
        {
            "errorType": "VALIDATION",
            "message": "Заявка уже подтверждена клиентом"
        }
    ]
}
```

### Получить фиатную заявку по хешу

`GET /order/{hash}`

* В случае успеха, возвращается информация о заявке.

* В процессе обработки могут происходить ошибки. В это случае ответ будет с кодом 4XX и текстом ошибки

* Параметр `hash` указывается в строке запроса

Пример запроса:
`/api/order/a7efd403-7d89-4b3c-9111-b5e3c79528e6?timestamp=2024-05-04T13:24:42`

Ответ (статус код 200):

```<json>   
{
    "success": true,
    "result": {
        "hash": "71ac21c7-d65b-47dd-89ad-17a441cb7838",
        "externalId": "111111112321344",
        "amount": 100.0000000000,
        "details": {
            "phoneNumber": "1",
            "cardNumber": "2"
        },
        "callbackUrl": "https://site.com/pay/result",
        "clientInfo": "User777",
        "paymentMethod": {
            "id": "d53e3d2e-4f9e-4570-ad5c-0b7647e45e48",
            "name": "Банк США",
            "type": "BANK_CARD_TRANSFER",
            "currency": {
                "code": "USD",
                "name": "Доллар США",
                "isActive": true,
                "precision": 2
            }
        },
        "createdAt": "2024-05-04T13:32:06.505575Z",
        "status": "PENDING"
    }
}
```

[Описание заявки](#описание_заявки) можно посмотреть выше

Ответ (статус код 4XX):

```<json>   
{
    "success": false,
    "error": [
        {
            "errorType": "VALIDATION",
            "message": "Заявка по хэшу не найдена в системе"
        }
    ]
}
```

### Получить фиатную заявку по внешнему ключу

`GET /order/ext/{externalId}`

* В случае успеха, возвращается информация о заявке.

* В процессе обработки могут происходить ошибки. В это случае ответ будет с кодом 4XX и текстом ошибки

* Параметр `externalId` указывается в строке запроса

Пример запроса:
`/api/order/ext/111111112321344?timestamp=2024-05-04T13:43:28`

Ответ (статус код 200):

```<json>   
{
    "success": true,
    "result": {
        "hash": "71ac21c7-d65b-47dd-89ad-17a441cb7838",
        "externalId": "111111112321344",
        "amount": 100.0000000000,
        "details": {
            "phoneNumber": "1",
            "cardNumber": "2"
        },
        "callbackUrl": "https://site.com/pay/result",
        "clientInfo": "User777",
        "paymentMethod": {
            "id": "d53e3d2e-4f9e-4570-ad5c-0b7647e45e48",
            "name": "Банк США",
            "type": "BANK_CARD_TRANSFER",
            "currency": {
                "code": "USD",
                "name": "Доллар США",
                "isActive": true,
                "precision": 2
            }
        },
        "createdAt": "2024-05-04T13:32:06.505575Z",
        "status": "PENDING"
    }
}
```

[Описание заявки](#описание_заявки) можно посмотреть выше

Ответ (статус код 4XX):

```<json>   
{
    "success": false,
    "error": [
        {
            "errorType": "VALIDATION",
            "message": "Заявка по внешнему ID не найдена в системе"
        }
    ]
}
```

### Получить фиатные заявки по фильтру

`GET /order`

* Все фильтры указываются в параметрах запроса
* Из обязательных параметров только `timestamp`
* В этом методе поддерживается механизм пагинации. За это отвечают параметры `pageNumber` и `pageSize`
* В этом методе поддерживается механизм сортировки совместно с пагинацией. За это отвечают параметры `fieldNameSort`
  и `isDescSort`
* В случае успеха, возвращаются заявки в формате:

```json
{
  "success": true,
  "result": {
    "elements": [
      ...
    ],
    "totalElements": 2,
    "totalPages": 1,
    "currentPages": 0
  }
}
```

| Свойство      | Описание                                              |
|---------------|-------------------------------------------------------|
| elements      | массив заявок который описан [выше](#описание_заявки) |
| totalElements | общее количество найденных элементов                  |
| totalPages    | общее количество страниц размера `pageSize`           |
| currentPages  | текущая страница                                      |

Параметры запроса

**Параметры:** Штамп времени в строке запроса

| Параметр      | Тип      | Обязательный | Примечание                           |
|---------------|----------|--------------|--------------------------------------|
| timestamp     | DateTime | Да           | Штамп времени                        |
| hash          | string   | Нет          | Отфильтровать по хешу заявки         |
| amountMin     | decimal  | Нет          | Фильтр нижней границы суммы          |
| amountMax     | decimal  | Нет          | Фильтр верхней границы суммы         |
| currency      | string   | Нет          | Фильтр по валюте                     |
| createdAfter  | DateTime | Нет          | Фильтр нижней границы даты создания  |
| createdBefore | DateTime | Нет          | Фильтр верхней границы даты создания |
| orderStatus   | string   | Нет          | Статус заявки                        |
| pageNumber    | int      | Нет          | Номер страницы                       |
| pageSize      | int      | Нет          | Размер страницы                      |
| fieldNameSort | string   | Нет          | Поле сортировки                      |
| isDescSort    | boolean  | Нет          | Направление сортировки               |

`orderStatus` может быть множественный - можно указать несколько статусов например `CANCELED` и `EXPIRED` и принимает
значения

```
PENDING - исполняется
SUCCESS - успешно,
CANCELED - отклонена,
EXPIRED - истекла
```

Пример запроса:
`/api/order?timestamp=2024-05-04T13:55:11&orderStatus=PENDING&pageNumber=1&pageSize=10&fieldNameSort=externalId`

Получает с 11 по 20 (`pageNumber=1&pageSize=10`) необработанные заявки (`orderStatus=PENDING`) отсортированные по ключу
внешней заявки (`fieldNameSort=externalId`)


## Уведомления

Мы работаем с системой уведомлений, которая уведомляет ваш сервис об изменении статуса транзакции.

Существует 10 попыток уведомлений, которые повторяются через определенный интервал времени.

Если вы получили статус, то обязательно верните код 200, чтобы система больше не отправляла уведомления по заявке.

### Как работает обратный вызов?

Прежде всего, при создании заявки вы получите идентификатор HASH, в котором указан идентификатор в нашей системе.

Когда статус транзакции будет изменен, вы получите обратные вызовы на адрес указанный при создании заявки. 

Если в личном кабинете был указан адрес обратного вызова, то если при создании заявки будет передан `callbackUrl` - вызов будет осуществляться на переданный в `callbackUrl` адрес
если `callbackUrl` не был передан, то берется значение из личного кабинета. Если нигде не удалось найти адрес обратного вызова, то при изменении статуса заявки уведомления не отправляются

На найденный адрес отправляется **POST**-запрос с телом заявки, в формате, который описан [выше](#описание_заявки)

пример:
```json
{
  "hash": "a7efd403-7d89-4b3c-9111-b5e3c79528e6",
  "externalId": "111111112321341",
  "amount": 100.00,
  "details": {
    "phoneNumber": "1",
    "cardNumber": "2"
  },
  "callbackUrl": "https://site.com/pay/result",
  "clientInfo": "User777",
  "paymentMethod": {
    "id": "d53e3d2e-4f9e-4570-ad5c-0b7647e45e48",
    "name": "Банк США",
    "type": "BANK_CARD_TRANSFER",
    "currency": {
      "code": "USD",
      "name": "Доллар США",
      "isActive": true,
      "precision": 2
    }
  },
  "createdAt": "2024-05-04T15:34:55.56096812+03:00",
  "status": "PENDING"
}
```

Запрос подписывается ключом api и секретом, по аналогии авторизации для вызова методов апи

Для проверки корректности информации, **обязательно!** проверяйте хеш модели с хешем из заголовка "SIGNATURE"

Варианты статуса заявки:
```
PENDING - исполняется
SUCCESS - успешно,
CANCELED - отклонена,
EXPIRED - истекла
```
